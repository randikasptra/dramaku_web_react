version: "3.8"

services:
  db:
    image: postgres:latest
    container_name: postgres-container
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dika1708
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

  python-seeder:
    build:
      context: .
      dockerfile: Dockerfile-python
    container_name: python-seeder
    volumes:
      - ./database:/app
      - ./database/.env:/app/.env
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: dika1708
      DB_NAME: dramaku3
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    command: python /app/seeder.py
    healthcheck:
      test: ["CMD", "python", "/app/seeder.py", "--check"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 30s

  server:
    build:
      context: .
      dockerfile: Dockerfile-server
    container_name: node-server
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      python-seeder:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: dika1708
      DB_NAME: dramaku3
      SERVER_PORT: 8080

  client:
    build:
      context: .
      dockerfile: Dockerfile-client
    container_name: react-client
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      server:
        condition: service_started
    environment:
      REACT_APP_DOMAIN_SERVER: http://localhost:8080

  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network
    depends_on:
      client:
        condition: service_started
      server:
        condition: service_started

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
